; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=nanomips-unknown=elf -verify-machineinstrs < %s | FileCheck %s

%struct.pera = type { [80 x i8], i32 }

@test = dso_local local_unnamed_addr global [1024 x %struct.pera] zeroinitializer, align 4

define dso_local i32 @foo(i32 signext %a, i32 signext %b) local_unnamed_addr  {
; CHECK-LABEL: foo:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sll $a2, $a0, 4
; CHECK-NEXT:    lsa $a2, $a0, $a2, 2
; CHECK-NEXT:    sll $a0, $a0, 6
; CHECK-NEXT:    addu $a0, $a0, $a2
; CHECK-NEXT:    addiu $a0, $a0, test
; CHECK-NEXT:    beqzc $a1, .LBB0_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    lw $a0, 80($a0)
; CHECK-NEXT:    jrc $ra
; CHECK-NEXT:  .LBB0_2: # %if.else
; CHECK-NEXT:    lbu $a0, 5($a0)
; CHECK-NEXT:    jrc $ra
entry:
  %tobool.not = icmp eq i32 %b, 0
  br i1 %tobool.not, label %if.else, label %if.then

if.then:
  %var = getelementptr inbounds [1024 x %struct.pera], [1024 x %struct.pera]* @test, i32 0, i32 %a, i32 1
  %0 = load i32, i32* %var, align 4
  br label %return

if.else:
  %arrayidx2 = getelementptr inbounds [1024 x %struct.pera], [1024 x %struct.pera]* @test, i32 0, i32 %a, i32 0, i32 5
  %1 = load i8, i8* %arrayidx2, align 1
  %conv = zext i8 %1 to i32
  br label %return

return:
  %retval.0 = phi i32 [ %0, %if.then ], [ %conv, %if.else ]
  ret i32 %retval.0
}
