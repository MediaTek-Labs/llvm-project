; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=nanomips-unknown=elf -verify-machineinstrs < %s | FileCheck %s

@b = external dso_local local_unnamed_addr global [0 x i32], align 4

define dso_local void @foo(i32* nocapture readonly %a) local_unnamed_addr optsize {
; CHECK-LABEL: foo:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    save 16, $ra
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    .cfi_offset 31, -4
; CHECK-NEXT:    addiu $a0, $a0, 40000
; CHECK-NEXT:    lw $a1, 4($a0)
; CHECK-NEXT:    lw $a0, 0($a0)
; CHECK-NEXT:    balc sink
; CHECK-NEXT:    restore.jrc 16, $ra
entry:
  %arrayidx = getelementptr inbounds i32, i32* %a, i32 10000
  %0 = load i32, i32* %arrayidx, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %a, i32 10001
  %1 = load i32, i32* %arrayidx1, align 4
  tail call void @sink(i32 signext %0, i32 signext %1) #3
  ret void
}

declare dso_local void @sink(i32 signext, i32 signext) local_unnamed_addr

define dso_local void @bar() local_unnamed_addr optsize {
; CHECK-LABEL: bar:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    save 16, $ra
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    .cfi_offset 31, -4
; CHECK-NEXT:    lapc.b $a0, b+40000
; CHECK-NEXT:    lw $a1, 4($a0)
; CHECK-NEXT:    lw $a0, 0($a0)
; CHECK-NEXT:    balc sink
; CHECK-NEXT:    restore.jrc 16, $ra
entry:
  %0 = load i32, i32* getelementptr inbounds ([0 x i32], [0 x i32]* @b, i32 0, i32 10000), align 4
  %1 = load i32, i32* getelementptr inbounds ([0 x i32], [0 x i32]* @b, i32 0, i32 10001), align 4
  tail call void @sink(i32 signext %0, i32 signext %1)
  ret void
}

define dso_local i32 @frob(i32* nocapture readonly %a) local_unnamed_addr {
; CHECK-LABEL: frob:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addiu $a1, $a0, 40000
; CHECK-NEXT:    lw $a1, 0($a1)
; CHECK-NEXT:    addiu $a0, $a0, 16380
; CHECK-NEXT:    lw $a0, 0($a0)
; CHECK-NEXT:    addu $a0, $a0, $a1
; CHECK-NEXT:    jrc $ra
entry:
  %arrayidx = getelementptr inbounds i32, i32* %a, i32 10000
  %0 = load i32, i32* %arrayidx, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %a, i32 4095
  %1 = load i32, i32* %arrayidx1, align 4
  %add = add nsw i32 %1, %0
  ret i32 %add
}
